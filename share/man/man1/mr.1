.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MR 1"
.TH MR 1 "2015-05-03" "perl v5.20.2" "mr"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
mr \- a tool to manage all your version control repos
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBmr\fR [options] checkout
.PP
\&\fBmr\fR [options] update
.PP
\&\fBmr\fR [options] status
.PP
\&\fBmr\fR [options] clean [\-f]
.PP
\&\fBmr\fR [options] commit [\-m \*(L"message\*(R"]
.PP
\&\fBmr\fR [options] record [\-m \*(L"message\*(R"]
.PP
\&\fBmr\fR [options] fetch
.PP
\&\fBmr\fR [options] push
.PP
\&\fBmr\fR [options] diff
.PP
\&\fBmr\fR [options] log
.PP
\&\fBmr\fR [options] grep pattern
.PP
\&\fBmr\fR [options] run command [param ...]
.PP
\&\fBmr\fR [options] bootstrap src [directory]
.PP
\&\fBmr\fR [options] register [repository]
.PP
\&\fBmr\fR [options] config section [\*(L"setting=[value]\*(R" ...]
.PP
\&\fBmr\fR [options] action [params ...]
.PP
\&\fBmr\fR [options] [online|offline]
.PP
\&\fBmr\fR [options] remember action [params ...]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBmr\fR is a tool to manage all your version control repos. It can checkout,
update, or perform other actions on a set of repositories as if they were
one combined repository. It supports any combination of subversion, git,
cvs, mercurial, bzr, darcs, fossil and veracity repositories, and support
for other version control systems can easily be added.
.PP
\&\fBmr\fR cds into and operates on all registered repositories at or below your
working directory. Or, if you are in a subdirectory of a repository that
contains no other registered repositories, it will stay in that directory,
and work on only that repository,
.PP
\&\fBmr\fR is configured by .mrconfig files, which list the repositories. It
starts by reading the .mrconfig file in your home directory, and this can
in turn chain load .mrconfig files from repositories. It also automatically
looks for a .mrconfig file in the current directory, or in one of its
parent directories.
.PP
These predefined commands should be fairly familiar to users of any version
control system:
.IP "checkout (or co)" 4
.IX Item "checkout (or co)"
Checks out any repositories that are not already checked out.
.IP "update" 4
.IX Item "update"
Updates each repository from its configured remote repository.
.Sp
If a repository isn't checked out yet, it will first check it out.
.IP "status" 4
.IX Item "status"
Displays a status report for each repository, showing what
uncommitted changes are present in the repository. For distributed version
control systems, also shows unpushed local branches.
.IP "clean" 4
.IX Item "clean"
Print ignored files, untracked files and other cruft in the working directory.
.Sp
The optional \-f parameter allows removing the files as well as printing them.
.IP "commit (or ci)" 4
.IX Item "commit (or ci)"
Commits changes to each repository. (By default, changes are pushed to the
remote repository too, when using distributed systems like git. If you
don't like this default, you can change it in your .mrconfig, or use record
instead.)
.Sp
The optional \-m parameter allows specifying a commit message.
.IP "record" 4
.IX Item "record"
Records changes to the local repository, but does not push them to the
remote repository. Only supported for distributed version control systems.
.Sp
The optional \-m parameter allows specifying a commit message.
.IP "fetch" 4
.IX Item "fetch"
Fetches from each repository's remote repository, but does not
update the working copy. Only supported for some distributed version
control systems.
.IP "push" 4
.IX Item "push"
Pushes committed local changes to the remote repository. A no-op for
centralized version control systems.
.IP "diff" 4
.IX Item "diff"
Show a diff of uncommitted changes.
.IP "log" 4
.IX Item "log"
Show the commit log.
.IP "grep pattern" 4
.IX Item "grep pattern"
Searches for a pattern in each repository using the grep subcommand. Uses
ack-grep on \s-1VCS\s0 that do not have their own.
.IP "run command [param ...]" 4
.IX Item "run command [param ...]"
Runs the specified command in each repository.
.PP
These commands are also available:
.IP "bootstrap src [directory]" 4
.IX Item "bootstrap src [directory]"
Causes mr to retrieve the source \f(CW\*(C`src\*(C'\fR and use it as a .mrconfig file to
checkout the repositories listed in it, into the specified directory.
.Sp
\&\fBmr\fR understands several types of sources:
.RS 4
.IP "\s-1URL\s0 for curl" 4
.IX Item "URL for curl"
\&\f(CW\*(C`src\*(C'\fR may be an \s-1URL\s0 understood by \fBcurl\fR.
.IP "copy via ssh" 4
.IX Item "copy via ssh"
To use \fBscp\fR to download, the \f(CW\*(C`src\*(C'\fR may have the form
\&\f(CW\*(C`ssh://[user@]host:file\*(C'\fR.
.IP "local file" 4
.IX Item "local file"
You can retrieve the config file by other means and pass its \fBpath\fR as \f(CW\*(C`src\*(C'\fR.
.IP "standard input" 4
.IX Item "standard input"
If source \f(CW\*(C`src\*(C'\fR consists in a single dash \f(CW\*(C`\-\*(C'\fR, config file is read from
standard input.
.RE
.RS 4
.Sp
The directory will be created if it does not exist. If no directory is
specified, the current directory will be used.
.Sp
As a special case, if source \f(CW\*(C`src\*(C'\fR includes a repository named \*(L".\*(R", that
is checked out into the top of the specified directory.
.RE
.IP "list (or ls)" 4
.IX Item "list (or ls)"
List the repositories that mr will act on.
.IP "register" 4
.IX Item "register"
Register an existing repository in a mrconfig file. By default, the
repository in the current directory is registered, or you can specify a
directory to register.
.Sp
The mrconfig file that is modified is chosen by either the \-c option, or by
looking for the closest known one at or in a parent of the current directory.
.IP "config" 4
.IX Item "config"
Adds, modifies, removes, or prints a value from a mrconfig file. The next
parameter is the name of the section the value is in. To add or modify
values, use one or more instances of \*(L"setting=value\*(R". Use \*(L"setting=\*(R" to
remove a setting. Use just \*(L"setting\*(R" to get the value of a that setting.
.Sp
For example, to add (or edit) a repository in src/foo:
.Sp
.Vb 1
\&  mr config src/foo checkout="svn co svn://example.com/foo/trunk foo"
.Ve
.Sp
To show the command that mr uses to update the repository in src/foo:
.Sp
.Vb 1
\&  mr config src/foo update
.Ve
.Sp
To see the built-in library of shell functions contained in mr:
.Sp
.Vb 1
\&  mr config DEFAULT lib
.Ve
.Sp
The mrconfig file that is used is chosen by either the \-c option, or by
looking for the closest known one at or in a parent of the current directory.
.IP "offline" 4
.IX Item "offline"
Advises mr that it is in offline mode. Any commands that fail in
offline mode will be remembered, and retried when mr is told it's online.
.IP "online" 4
.IX Item "online"
Advices mr that it is in online mode again. Commands that failed while in
offline mode will be re-run.
.IP "remember" 4
.IX Item "remember"
Remember a command, to be run later when mr re-enters online mode. This
implicitly puts mr into offline mode. The command can be any regular mr
command. This is useful when you know that a command will fail due to being
offline, and so don't want to run it right now at all, but just remember
to run it when you go back online.
.IP "help" 4
.IX Item "help"
Displays this help.
.PP
Actions can be abbreviated to any unambiguous substring, so
\&\*(L"mr st\*(R" is equivalent to \*(L"mr status\*(R", and \*(L"mr up\*(R" is equivalent to \*(L"mr
update\*(R"
.PP
Additional parameters can be passed to most commands, and are passed on
unchanged to the underlying version control system. This is mostly useful
if the repositories mr will act on all use the same version control
system.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-d directory" 4
.IX Item "-d directory"
.PD 0
.IP "\-\-directory directory" 4
.IX Item "--directory directory"
.PD
Specifies the topmost directory that \fBmr\fR should work in. The default is
the current working directory.
.IP "\-c mrconfig" 4
.IX Item "-c mrconfig"
.PD 0
.IP "\-\-config mrconfig" 4
.IX Item "--config mrconfig"
.PD
Use the specified mrconfig file. The default is to use both \fI~/.mrconfig\fR
as well as look for a \fI.mrconfig\fR file in the current directory, or in one
of its parent directories.
.IP "\-f" 4
.IX Item "-f"
.PD 0
.IP "\-\-force" 4
.IX Item "--force"
.PD
Force mr to act on repositories that would normally be skipped due to their
configuration.
.IP "\-v" 4
.IX Item "-v"
.PD 0
.IP "\-\-verbose" 4
.IX Item "--verbose"
.PD
Be verbose.
.IP "\-m" 4
.IX Item "-m"
.PD 0
.IP "\-\-minimal" 4
.IX Item "--minimal"
.PD
Minimise output. If a command fails or there is any output then the usual
output will be shown.
.IP "\-q" 4
.IX Item "-q"
.PD 0
.IP "\-\-quiet" 4
.IX Item "--quiet"
.PD
Be quiet. This suppresses mr's usual output, as well as any output from
commands that are run (including stderr output). If a command fails,
the output will be shown.
.IP "\-k" 4
.IX Item "-k"
.PD 0
.IP "\-\-insecure" 4
.IX Item "--insecure"
.PD
Accept untrusted \s-1SSL\s0 certificates when bootstrapping.
.IP "\-s" 4
.IX Item "-s"
.PD 0
.IP "\-\-stats" 4
.IX Item "--stats"
.PD
Expand the statistics line displayed at the end to include information
about exactly which repositories failed and were skipped, if any.
.IP "\-i" 4
.IX Item "-i"
.PD 0
.IP "\-\-interactive" 4
.IX Item "--interactive"
.PD
Interactive mode. If a repository fails to be processed, a subshell will be
started which you can use to resolve or investigate the problem. Exit the
subshell to continue the mr run.
.IP "\-n [number]" 4
.IX Item "-n [number]"
.PD 0
.IP "\-\-no\-recurse [number]" 4
.IX Item "--no-recurse [number]"
.PD
If no number if specified, just operate on the repository for the current
directory, do not recurse into deeper repositories.
.Sp
If a number is specified, will recurse into repositories at most that many
subdirectories deep. For example, with \-n 2 it would recurse into ./src/foo,
but not ./src/packages/bar.
.IP "\-j [number]" 4
.IX Item "-j [number]"
.PD 0
.IP "\-\-jobs [number]" 4
.IX Item "--jobs [number]"
.PD
Run the specified number of jobs in parallel, or an unlimited number of jobs
with no number specified. This can greatly speed up operations such as updates.
It is not recommended for interactive operations.
.Sp
Note that running more than 10 jobs at a time is likely to run afoul of
ssh connection limits. Running between 3 and 5 jobs at a time will yield
a good speedup in updates without loading the machine too much.
.IP "\-t" 4
.IX Item "-t"
.PD 0
.IP "\-\-trust\-all" 4
.IX Item "--trust-all"
.PD
Trust all mrconfig files even if they are not listed in \fI~/.mrtrust\fR.
Use with caution.
.IP "\-p" 4
.IX Item "-p"
.PD 0
.IP "\-\-path" 4
.IX Item "--path"
.PD
This obsolete flag is ignored.
.SH "MRCONFIG FILES"
.IX Header "MRCONFIG FILES"
Here is an example \fI.mrconfig\fR file:
.PP
.Vb 3
\&  [src]
\&  checkout = svn checkout svn://svn.example.com/src/trunk src
\&  chain = true
\&
\&  [src/linux\-2.6]
\&  checkout = git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux\-2.6.git &&
\&        cd linux\-2.6 &&
\&        git checkout \-b mybranch origin/master
.Ve
.PP
The \fI.mrconfig\fR file uses a variant of the \s-1INI\s0 file format. Lines
starting with \*(L"#\*(R" are comments. Values can be continued to the
following line by indenting the line with whitespace.
.PP
The \f(CW\*(C`DEFAULT\*(C'\fR section allows setting default values for the sections that
come after it.
.PP
The \f(CW\*(C`ALIAS\*(C'\fR section allows adding aliases for actions. Each setting
is an alias, and its value is the action to use.
.PP
All other sections add repositories. The section header specifies the
directory where the repository is located. This is relative to the directory
that contains the mrconfig file, but you can also choose to use absolute
paths. (Note that you can use environment variables in section names; they
will be passed through the shell for expansion. For example, 
\&\f(CW\*(C`[$HOSTNAME]\*(C'\fR, or \f(CW\*(C`[${HOSTNAME}foo]\*(C'\fR).
.PP
Within a section, each setting defines a shell command to run to handle a
given action. mr contains default handlers for \*(L"update\*(R", \*(L"status\*(R",
\&\*(L"commit\*(R", and other standard actions.
.PP
Normally you only need to specify what to do for \*(L"checkout\*(R". Here you
specify the command to run in order to create a checkout of the repository.
The command will be run in the parent directory, and must create the
repository's directory. So use \f(CW\*(C`git clone\*(C'\fR, \f(CW\*(C`svn checkout\*(C'\fR, \f(CW\*(C`bzr branch\*(C'\fR
or \f(CW\*(C`bzr checkout\*(C'\fR (for a bound branch), etc.
.PP
Note that these shell commands are run in a \f(CW\*(C`set \-e\*(C'\fR shell
environment, where any additional parameters you pass are available in
\&\f(CW$@\fR. All commands other than \*(L"checkout\*(R" are run inside the repository,
though not necessarily at the top of it.
.PP
The \f(CW\*(C`MR_REPO\*(C'\fR environment variable is set to the path to the top of the
repository. (For the \*(L"register\*(R" action, \*(L"\s-1MR_REPO\*(R"\s0 is instead set to the 
basename of the directory that should be created when checking the
repository out.)
.PP
The \f(CW\*(C`MR_CONFIG\*(C'\fR environment variable is set to the .mrconfig file
that defines the repo being acted on, or, if the repo is not yet in a config
file, the \fI.mrconfig\fR file that should be modified to register the repo.
.PP
The \f(CW\*(C`MR_ACTION\*(C'\fR environment variable is set to the command being run
(update, checkout, etc).
.PP
A few settings have special meanings:
.IP "skip" 4
.IX Item "skip"
If \*(L"skip\*(R" is set and its command returns true, then \fBmr\fR
will skip acting on that repository. The command is passed the action
name in \f(CW$1\fR.
.Sp
Here are two examples. The first skips the repo unless
mr is run by joey. The second uses the hours_since function
(included in mr's built-in library) to skip updating the repo unless it's
been at least 12 hours since the last update.
.Sp
.Vb 3
\&  [mystuff]
\&  checkout = ...
\&  skip = test \`whoami\` != joey
\&
\&  [linux]
\&  checkout = ...
\&  skip = [ "$1" = update ] && ! hours_since "$1" 12
.Ve
.Sp
Another way to use skip is for a lazy checkout. This makes mr skip
operating on a repo unless it already exists. To enable the 
repo, you have to explicitly check it out (using \*(L"mr \-\-force \-d foo checkout\*(R").
.Sp
.Vb 3
\&  [foo]
\&  checkout = ...
\&  skip = lazy
.Ve
.IP "order" 4
.IX Item "order"
The \*(L"order\*(R" setting can be used to override the default ordering of
repositories. The default order value is 10. Use smaller values to make
repositories be processed earlier, and larger values to make repositories
be processed later.
.Sp
Note that if a repository is located in a subdirectory of another
repository, ordering it to be processed earlier is not recommended.
.IP "chain" 4
.IX Item "chain"
If \*(L"chain\*(R" is set and its command returns true, then \fBmr\fR
will try to load a \fI.mrconfig\fR file from the root of the repository.
.IP "include" 4
.IX Item "include"
If \*(L"include\*(R" is set, its command is ran, and should output
additional mrconfig file content. The content is included as if it were
part of the including file.
.Sp
Unlike everything else, \*(L"include\*(R" does not need to be placed within a section.
.Sp
\&\fBmr\fR ships several libraries that can be included to add support for
additional version control type things (unison, git-svn, git-fake-bare,
git-subtree). To include them all, you could use:
.Sp
.Vb 1
\&  include = cat /usr/share/mr/*
.Ve
.Sp
See the individual files for details.
.IP "deleted" 4
.IX Item "deleted"
If \*(L"deleted\*(R" is set and its command returns true, then
\&\fBmr\fR will treat the repository as deleted. It won't ever actually delete
the repository, but it will warn if it sees the repository's directory.
This is useful when one mrconfig file is shared among multiple machines,
to keep track of and remember to delete old repositories.
.IP "lib" 4
.IX Item "lib"
The \*(L"lib\*(R" setting can contain some shell code that will be run
before each command, this can be a useful way to define shell
functions for other commands to use.
.Sp
Unlike most other settings, this can be specified multiple times, in
which case the chunks of shell code are accumulatively concatenated
together.
.IP "fixups" 4
.IX Item "fixups"
If \*(L"fixups\*(R" is set, its command is run whenever a repository
is checked out, or updated. This provides an easy way to do things
like permissions fixups, or other tweaks to the repository content,
whenever the repository is changed.
.IP "jobs" 4
.IX Item "jobs"
If \*(L"jobs\*(R" is set, run the specified number of jobs in parallel.
This can greatly speed up operations such as updates.
.Sp
Note that running more than 10 jobs at a time is likely to run afoul of
ssh connection limits. Running between 3 and 5 jobs at a time will yield
a good speedup in updates without loading the machine too much.
.IP "VCS_action" 4
.IX Item "VCS_action"
When looking for a command to run for a given action, mr first looks for
a setting with the same name as the action. If that is not found, it
looks for a setting named \*(L"VCS_action\*(R" (substituting in the name of the
version control system and the action).
.Sp
Internally, mr has settings for \*(L"git_update\*(R", \*(L"svn_update\*(R", etc. To change
the action that is performed for a given version control system, you can
override these \s-1VCS\s0 specific actions. To add a new version control system,
you can just add \s-1VCS\s0 specific actions for it.
.IP "pre_ and post_" 4
.IX Item "pre_ and post_"
If \*(L"pre_action\*(R" is set, its command is run before mr performs the
specified action. Similarly, \*(L"post_action\*(R" commands are run after mr
successfully performs the specified action. For example, \*(L"pre_commit\*(R" is
run before committing; \*(L"post_update\*(R" is run after updating.
.IP "_append" 4
.IX Item "_append"
Any setting can be suffixed with \f(CW\*(C`_append\*(C'\fR, to add an additional value
to the existing value of the setting. In this way, actions 
can be constructed accumulatively.
.IP "VCS_test" 4
.IX Item "VCS_test"
The name of the version control system is itself determined by
running each defined \*(L"VCS_test\*(R" action, until one succeeds.
.SH "UNTRUSTED MRCONFIG FILES"
.IX Header "UNTRUSTED MRCONFIG FILES"
Since mrconfig files can contain arbitrary shell commands, they can do
anything. This flexibility is good, but it also allows a malicious mrconfig
file to delete your whole home directory. Such a file might be contained
inside a repository that your main \fI~/.mrconfig\fR checks out. To
avoid worries about evil commands in a mrconfig file, mr defaults to
reading all mrconfig files other than the main \fI~/.mrconfig\fR in untrusted
mode. In untrusted mode, mrconfig files are limited to running only known
safe commands (like \*(L"git clone\*(R") in a carefully checked manner.
.PP
To configure mr to trust other mrconfig files, list them in \fI~/.mrtrust\fR.
One mrconfig file should be listed per line. Either the full pathname
should be listed, or the pathname can start with \fI~/\fR to specify a file
relative to your home directory.
.SH "OFFLINE LOG FILE"
.IX Header "OFFLINE LOG FILE"
The \fI~/.mrlog\fR file contains commands that mr has remembered to run later,
due to being offline. You can delete or edit this file to remove commands,
or even to add other commands for 'mr online' to run. If the file is
present, mr assumes it is in offline mode.
.SH "EXTENSIONS"
.IX Header "EXTENSIONS"
mr can be extended to support things such as unison and git-svn. Some
files providing such extensions are available in \fI/usr/share/mr/\fR. See
the documentation in the files for details about using them.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
mr returns nonzero if a command failed in any of the repositories.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright 2007\-2011 Joey Hess <joey@kitenet.net>
.PP
Licensed under the \s-1GNU GPL\s0 version 2 or higher.
.PP
http://myrepos.branchable.com/
